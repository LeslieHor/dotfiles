#!/usr/bin/env bash

i3c="${HOME}/.config/i3/i3c"

DISPLAY_NUM=${1}

# Data from i3c
BAR_X=$(${i3c} dzen2-bar-x ${DISPLAY_NUM})
BAR_WIDTH=$(${i3c} dzen2-bar-width ${DISPLAY_NUM})

BAR_FONT="$(xrdb-query 'Leslie.bar.font')"
CPU_SPEED_WARN=30
CPU_SPEED_ALERT=40
CPU_TEMP_WARN=60
CPU_TEMP_ALERT=80

BAR_FG="#ffffff"
BAR_BG="#222222"
BAR_BG_ACTIVE="#228822"
BAR_MARGIN=10
BG_WS_ACTIVE="^bg(#006600)"
BG_WS_VISIBLE="^bg(#114400)"
BG_WS_HIDDEN="^bg(#444444)"
BG_END="^bg()"

FG_END="^fg()"
FG_ON="^fg(#00FF00)"
FG_OFF="^fg(#FF0000)"
FG_ACTIVE="^fg(#00FF00)"
FG_INACTIVE="^fg(#999999)"
FG_OK="^fg(#00FF00)"
FG_WARN="^fg(#FFFF00)"
FG_ALERT="^fg(#FF0000)"
FG_HEADER="^fg(#999999)"

SEP="^fg(#555555) | ^fg()"

cpu() {
    ps -eo pcpu | awk 'BEGIN {sum=0.0f} {sum+=$1} END {print sum}'
}

ram() {
    read -r t f <<< $(grep -E 'Mem(Total|Free)' /proc/meminfo |awk '{print $2}' | tr '\n' ' ')
    read -r b c <<< $(grep -E '^(Buffers|Cached)' /proc/meminfo |awk '{print $2}' | tr '\n' ' ')

    PERCENT=$(echo "100 * ($t - $f - $c - $b) / $t" | bc)
    echo "${FG_HEADER}RAM:${FG_END} ${PERCENT}%"
}

diskusage() {
    DISK_USAGE=$(df -h ${1} 2> /dev/null | tail -n 1 | awk '{print $4}')
    echo "${FG_HEADER}D${2}:${FG_END} ${DISK_USAGE}"
}

battery() {
    BATT_INFO=$(upower -i /org/freedesktop/UPower/devices/battery_BAT0)
    PERCENT=$(echo -e "${BATT_INFO}" | grep -oP 'percentage: *\K[0-9]*')
    STATE=$(echo -e "${BATT_INFO}" | grep -oP 'state: *\K.*')
    TIME_TO_FULL=$(echo -e "${BATT_INFO}" | grep -oP 'time to full: *\K.*' | sed 's/ hours/h/')
    TIME_TO_EMPTY=$(echo -e "${BATT_INFO}" | grep -oP 'time to empty: *\K.*' | sed 's/ hours/h/')
    ENERGY_RATE=$(echo -e "${BATT_INFO}" | grep -oP 'energy-rate: *\K.*')

    if [ "${STATE}" == "charging" ]; then
        INFO="${FG_ON}${PERCENT}% (${ENERGY_RATE} ${TIME_TO_FULL})${FG_END}"
    elif [ "${STATE}" == "discharging" ]; then
        if [ "${PERCENT}" -lt 15 ]; then
            INFO="${FG_ALERT}${PERCENT}% (${ENERGY_RATE} ${TIME_TO_EMPTY})${FG_END}"
        elif [ "${PERCENT}" -lt 30 ]; then
            INFO="${FG_WARN}${PERCENT}% (${ENERGY_RATE} ${TIME_TO_EMPTY})${FG_END}"
        else
            INFO="${PERCENT}% (${ENERGY_RATE} ${TIME_TO_EMPTY})"
        fi
    else
        INFO="${PERCENT}percent ${STATE} (${ENERGY_RATE} ${TIME_TO_FULL}${TIME_TO_EMPTY})"
    fi

    echo "${FG_HEADER}BAT:${FG_END} ${INFO}"
}

brightness() {
    BRIGHTNESS=$(xrandr --verbose | grep eDP-1 -A 10 | grep -oP 'Brightness: \K[0-9]*\.[0-9]*')
    echo "${BRIGHTNESS} * 100" | bc | grep -oP "^[0-9]*"
}

volume() {
    VOLUME=$(amixer get Master)
    PERCENTAGE=$(echo -e "${VOLUME}" | grep -oP '[0-9]*%')
    if echo -e "${VOLUME}" | grep -q '\[off\]'; then
        INFO="${FG_INACTIVE}${PERCENTAGE}${FG_END}"
    else
        INFO="${PERCENTAGE}"
    fi

    echo "${FG_HEADER}VOL:${FG_END} ${INFO}"
}

sticky_keys() {
    STATE=$(xkbset q | grep -oP 'Sticky-Keys = \K.*')
    if [ "${STATE}" == "On" ]; then
        echo "${FG_ACTIVE}STK${FG_END}"
    elif [ "${STATE}" == "Off" ]; then
        echo "${FG_INACTIVE}STK${FG_END}"
    else
        echo "STK: ${STATE}"
    fi
}

cpu_speed() {
    read -r a b c d <<< $(grep -oP 'cpu MHz[ \t]*:[ \t]*\K[0-9]*' /proc/cpuinfo | tr '\n' ' ')
    a=$((${a} / 100))
    b=$((${b} / 100))
    c=$((${c} / 100))
    d=$((${d} / 100))
    e=$(( ( ${a} + ${b} + ${c} + ${d} ) / 4))

    if [ "${e}" -lt "${CPU_SPEED_WARN}" ]; then
        INFO="${FG_OK}${e}${FG_END}"
    elif [ "${e}" -lt "${CPU_SPEED_ALERT}" ]; then
        INFO="${FG_WARN}${e}${FG_END}"
    else
        INFO="${FG_ALERT}${e}${FG_END}"
    fi

    echo "${FG_HEADER}CPU:${FG_END} ${INFO}"
}

cpu_temps() {
    TEMP=$(sensors | grep -oP 'Package id 0: *\+\K[0-9]*')

    if [ "${TEMP}" -lt "${CPU_TEMP_WARN}" ]; then
        echo "${FG_HEADER}CTP:${FG_END} ${FG_OK}${TEMP}${FG_END}"
    elif [ "${TEMP}" -lt "${CPU_TEMP_ALERT}" ]; then
        echo "${FG_HEADER}CTP:${FG_END} ${FG_WARN}${TEMP}${FG_END}"
    else
        echo "${FG_HEADER}CTP:${FG_END} ${FG_ALERT}${TEMP}${FG_END}"
    fi
}

wifi() {
    NET_DATA=$(nmcli -t device show wlp2s0)
    NETWORK=$(printf "${NET_DATA}" | grep -oP 'GENERAL\.CONNECTION:\K.*' | sed 's/ [0-9]*$//')
    CONNECTED=$(printf "${NET_DATA}" | grep -oP 'GENERAL\.STATE: *[0-9]* \(\K.*' | sed 's/)$//')
    if [ "${CONNECTED}" == "connected" ]; then
        INFO="${FG_ON}${NETWORK}${FG_END}"
    else
        INFO="${FG_OFF}${NETWORK}${FG_END}"
    fi

    echo "${FG_HEADER}NET:${FG_END} ${INFO}"
}

workspaces() {
    WORKSPACES=""
    IFS=$'\t'
    for WS in $(${i3c} bar-workspaces ${1}); do
        INDICATOR=${WS:0:1}
        NAME=${WS:1}
        WS_NUM=$(echo ${NAME} | grep -oP '^[0-9]*')
        if [[ "${INDICATOR}" == "A" ]]; then
            BG=${BG_WS_ACTIVE}
        elif [[ "${INDICATOR}" == "V" ]]; then
            BG=${BG_WS_VISIBLE}
        elif [[ "${INDICATOR}" == "H" ]]; then
            BG=${BG_WS_HIDDEN}
        fi

        CLICK_TARGET="^ca(1, ${i3c} focus-workspace ${WS_NUM})"
        WORKSPACES="${WORKSPACES}${BG}${CLICK_TARGET} ${NAME} ^ca()${BG_END} "
    done

    echo "${WORKSPACES}"
}

active_display() {
    active_display=$(${i3c} active-display)
    if [ ${active_display} == ${1} ]; then
        echo "ACTIVE"
    fi
}

i3_keys_disabled() {
    cat ~/.config/i3/i3_keys_disabled_status
}

music() {
    mpc_status=$(mpc --format '%albumartist% - %title%' status)

    if [ "$?" -gt 0 ]; then
        echo "${FG_HEADER}MUS:${FG_END} ${FG_OFF}MPD not running${FG_END}"
        return
    fi

    line_count=$(wc -l <<< "${mpc_status}")
    if [ "${line_count}" -lt 2 ]; then
        echo "${FG_HEADER}MUS:${FG_END} ${FG_INACTIVE}No track loaded${FG_END}"
        return
    fi

    current_song=$(head -n1 <<< "${mpc_status}" | \
                       sed "y/â€™/'/") # Clean up song titles

    case $(sed '2q;d' <<< "${mpc_status}" | grep -oP '\[.*\]') in
        "[playing]")
            play_status="Playing"
            ;;
        "[paused]")
            play_status="Paused"
            ;;
        *)
            play_status=""
            ;;
    esac

    track_pos=$(grep -oP '#[0-9]*/[0-9]*' <<< "${mpc_status}")
    track_progress=$(grep -oP '#[0-9]*/[0-9]* *\K[0-9]*:[0-9]*/[0-9]*:[0-9]*' <<< "${mpc_status}")

    echo "${FG_HEADER}MUS:${FG_END} [${play_status}] ${track_pos} - ${track_progress} - ${current_song}"
}

while sleep 1; do
    # Evaluate variables
    if [ $(( ${SECONDS} % 1 )) == 0 ] || [ ${SECONDS} -lt 3 ]; then
        workspaces=$(workspaces ${DISPLAY_NUM})
        active_display=$(active_display ${DISPLAY_NUM})
        sticky_keys=$(sticky_keys)
        date=$(date '+%Y-%m-%d %H:%M:%S')
        music=$(music)
    fi

    if [ $(( ${SECONDS} % 5 )) == 0 ] || [ ${SECONDS} -lt 3 ]; then
        cpu_speed=$(cpu_speed)
        cpu_temps=$(cpu_temps)
        ram=$(ram)
    fi

    if [ $(( ${SECONDS} % 10 )) == 0 ] || [ ${SECONDS} -lt 3 ]; then
        i3_keys_disabled=$(i3_keys_disabled)
    fi

    if [ $(( ${SECONDS} % 600 )) == 0 ] || [ ${SECONDS} -lt 3 ]; then
        diskusage_f=$(diskusage / 'F/')
        diskusage_s=$(diskusage /media/leslie/slave/ 'S/')
    fi

    # Left block
    left=""
    left="${left}${workspaces}"

    ## add margin for left side
    printf "^pa(${BAR_MARGIN})"
    printf "${left}"

    # Centre block
    centre=""
    centre="${centre}${active_display}"
    centre="${centre}${i3_keys_disabled}"

    ## find the offset for the centre block
    width=$(dzen2-textwidth "${BAR_FONT}" "${centre}")
    offset=$(( ( ${BAR_WIDTH} - ${width} ) / 2 ))
    printf "^pa(${offset})"
    printf "${centre}"

    # Right block
    right=""
    case "${DISPLAY_NUM}" in
        0)
            right="${right}${SEP}${music}"
            ;;
        2)
            right="${right}${SEP}${cpu_speed}"
            right="${right}${SEP}${cpu_temps}"
            right="${right}${SEP}${diskusage_f}"
            right="${right}${SEP}${diskusage_s}"
            right="${right}${SEP}${ram}"
            right="${right}${SEP}${sticky_keys}"
            ;;
    esac
    right="${right}${SEP}${date}"

    ## find the offset for the right block
    bare_text=$(echo "${right}" | sed "s/\^[a-z][a-z]([A-Za-z0-9#]*)//g")
    width=$(dzen2-textwidth "${BAR_FONT}" "${bare_text}")
    offset=$((${BAR_WIDTH} - ${width} - ${BAR_MARGIN}))

    # Correct percentage signs
    right=$(echo ${right} | sed 's/%/%%/g')

    printf "^pa(${offset})"
    printf "${right}"

    printf "\n"
done | dzen2 -dock \
             -ta l \
             -x ${BAR_X} \
             -w ${BAR_WIDTH} \
             -fg ${BAR_FG} \
             -bg ${BAR_BG} \
             -fn ${BAR_FONT}
