#!/usr/bin/env bash

i3c="${HOME}/.config/i3/i3c"

# Data from i3c
BAR_X=$(${i3c} dzen2-bar-x ${1})
BAR_WIDTH=$(${i3c} dzen2-bar-width ${1})

BAR_FONT="-*-terminus-*-*-*-*-12-*-*-*-*-*-*-*"
BAR_FG="#ffffff"
BAR_BG="#222222"
BAR_BG_ACTIVE="#228822"
BAR_MARGIN=10

cpu() {
    ps -eo pcpu | awk 'BEGIN {sum=0.0f} {sum+=$1} END {print sum}'
}

ram() {
    read -r t f <<< $(grep -E 'Mem(Total|Free)' /proc/meminfo |awk '{print $2}' | tr '\n' ' ')
    read -r b c <<< $(grep -E '^(Buffers|Cached)' /proc/meminfo |awk '{print $2}' | tr '\n' ' ')

    echo "100 * ($t - $f - $c - $b) / $t" | bc
}

diskusage() {
    df ${1} | tail -n 1 | awk '{print $5}'
}

battery() {
    BATT_INFO=$(upower -i /org/freedesktop/UPower/devices/battery_BAT0)
    PERCENT=$(echo -e "${BATT_INFO}" | grep -oP 'percentage: *\K[0-9]*%')
    STATE=$(echo -e "${BATT_INFO}" | grep -oP 'state: *\K.*')
    TIME_TO_FULL=$(echo -e "${BATT_INFO}" | grep -oP 'time to full: *\K.*')
    TIME_TO_EMPTY=$(echo -e "${BATT_INFO}" | grep -oP 'time to empty: *\K.*')
    ENERGY_RATE=$(echo -e "${BATT_INFO}" | grep -oP 'energy-rate: *\K.*')

    echo "${PERCENT} ${STATE} (${ENERGY_RATE} ${TIME_TO_FULL}${TIME_TO_EMPTY})"
}

brightness() {
    BRIGHTNESS=$(xrandr --verbose | grep eDP-1 -A 10 | grep -oP 'Brightness: \K[0-9]*\.[0-9]*')
    echo "${BRIGHTNESS} * 100" | bc | grep -oP "^[0-9]*"
}

volume() {
    VOLUME=$(amixer get Master)
    PERCENTAGE=$(echo -e "${VOLUME}" | grep -oP '[0-9]*%')
    if echo -e "${VOLUME}" | grep -q '\[off\]'; then
        echo "${PERCENTAGE} (mute)"
    else
        echo "${PERCENTAGE}"
    fi
}

sticky_keys() {
    xkbset q | grep -oP 'Sticky-Keys = \K.*'
}

cpu_speed() {
    read -r a b c d <<< $(grep -oP 'cpu MHz[ \t]*:[ \t]*\K[0-9]*' /proc/cpuinfo | tr '\n' ' ')
    a=$((${a} / 100))
    b=$((${b} / 100))
    c=$((${c} / 100))
    d=$((${d} / 100))
    e=$(( ( ${a} + ${b} + ${c} + ${d} ) / 4 ))

    echo "${e}"
}

cpu_temps() {
    # First one has decimal point temps
    # sensors | grep -oP ': *\+\K[0-9.]*' | tr '\n' ' '
    sensors | grep -oP 'Package id 0: *\+\K[0-9]*' | tr '\n' ' '
}

while sleep 1; do
    # TODO: Finish this
    active_display=$(${i3c} dzen2-active-display)
    if [ ${active_display} == ${1} ]; then
        BACKGROUND=${BAR_BG_ACTIVE}
    fi

    # Left block
    left=""
    left="${left}$(${i3c} dzen2-bar-workspaces ${1})"

    ## add margin for left side
    printf "^pa(${BAR_MARGIN})"
    printf "${left}"

    # Centre block
    centre=""
    centre="${centre}"

    ## find the offset for the centre block
    width=$(dzen2-textwidth "${BAR_FONT}" "${centre}")
    offset=$(( ( ${BAR_WIDTH} - ${width} ) / 2 ))
    printf "^pa(${offset})"
    printf "${centre}"

    # Right block
    right=""
    if [ "${1}" == 0 ]; then
        right="${right}CTU: $(cpu_speed) | "
        right="${right}CTP: $(cpu_temps) | "
        right="${right}DF/: $(diskusage /) | "
        right="${right}D/S: $(diskusage /media/leslie/slave/) | "
        right="${right}RAM: $(ram)% | "
    fi
    right="${right}$(date '+%Y-%m-%d %H:%M:%S')"

    ## find the offset for the right block
    width=$(dzen2-textwidth "${BAR_FONT}" "${right}")
    offset=$((${BAR_WIDTH} - ${width} - ${BAR_MARGIN}))

    # Correct percentage signs
    right=$(echo ${right} | sed 's/%/%%/g')

    printf "^pa(${offset})"
    printf "${right}"

    printf "\n"
done | dzen2 -dock \
             -ta l \
             -x ${BAR_X} \
             -w ${BAR_WIDTH} \
             -fg ${BAR_FG} \
             -bg ${BAR_BG} \
             -fn ${BAR_FONT}
